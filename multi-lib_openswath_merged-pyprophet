lib, = glob_wildcards("pqp/{lib}.PQP")
run, = glob_wildcards("mzml/{run}.mzML")

rule all:
    input:
       expand("osw_merge/{lib}.tric.tsv", lib=lib),


rule PyprophetMerge:
    input:
        osw = lambda wildcards: expand("osw/{{lib}}.{run}.osw", run=run),
	PQP = "pqp/{lib}.PQP"
    output:
        osw = "osw_merge/{lib}.merged.osw"
    threads: 12
    shell: "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet merge --template={input.PQP} --out={output} {input.osw} && "
           "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet score --threads=12 --in={output.osw} --level=ms1ms2 && "
           "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet peptide --in={output.osw} --context=run-specific peptide --in={output.osw} --context=experiment-wide peptide --in={output.osw} --context=global && "
           "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet protein --in={output.osw} --context=run-specific protein --in={output.osw} --context=experiment-wide protein --in={output.osw} --context=global"


rule PyprophetExport:
    input:
        osw =  "osw_merge/{lib}.merged.osw"
    output:
        tsv = "osw_merge/{lib}.pyprophet.tsv"
    threads: 12
    shell: "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet export --in={input.osw} --out={output.tsv} --format legacy_merged"

rule TricAlignment:
    input:
        tsv =  "osw_merge/{lib}.pyprophet.tsv"
    output:
        tsv = "osw_merge/{lib}.tric.tsv"
    threads: 12
    shell: "/home/karlssoc/miniconda3/envs/pyprophet/bin/feature_alignment.py --in {input.tsv} --out {output.tsv} "
           "--method LocalMST --realign_method lowess_cython --max_rt_diff 60 "
           "--mst:useRTCorrection True --mst:Stdev_multiplier 3.0 "
           "--target_fdr 0.01 --max_fdr_quality 0.05"
(snakemake) karlssoc@jmskeletor:~/projects/mslibrarian/libs_210121$ cat osw_merge_score_tric.smk
lib, = glob_wildcards("pqp/{lib}.PQP")
run, = glob_wildcards("mzml/{run}.mzML")

rule all:
    input:
       expand("osw_merge/{lib}.tric.tsv", lib=lib),


rule PyprophetMerge:
    input:
        osw = lambda wildcards: expand("osw/{{lib}}.{run}.osw", run=run),
	PQP = "pqp/{lib}.PQP"
    output:
        osw = "osw_merge/{lib}.merged.osw"
    threads: 12
    shell: "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet merge --template={input.PQP} --out={output} {input.osw} && "
           "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet score --threads=12 --in={output.osw} --level=ms1ms2 && "
           "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet peptide --in={output.osw} --context=run-specific peptide --in={output.osw} --context=experiment-wide peptide --in={output.osw} --context=global && "
           "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet protein --in={output.osw} --context=run-specific protein --in={output.osw} --context=experiment-wide protein --in={output.osw} --context=global"


rule PyprophetExport:
    input:
        osw =  "osw_merge/{lib}.merged.osw"
    output:
        tsv = "osw_merge/{lib}.pyprophet.tsv"
    threads: 12
    shell: "/home/karlssoc/miniconda3/envs/pyprophet/bin/pyprophet export --in={input.osw} --out={output.tsv} --format legacy_merged"

rule TricAlignment:
    input:
        tsv =  "osw_merge/{lib}.pyprophet.tsv"
    output:
        tsv = "osw_merge/{lib}.tric.tsv"
    threads: 12
    shell: "/home/karlssoc/miniconda3/envs/pyprophet/bin/feature_alignment.py --in {input.tsv} --out {output.tsv} "
           "--method LocalMST --realign_method lowess_cython --max_rt_diff 60 "
           "--mst:useRTCorrection True --mst:Stdev_multiplier 3.0 "
           "--target_fdr 0.01 --max_fdr_quality 0.05"
